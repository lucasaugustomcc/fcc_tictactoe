/* ASSIGNMENT */

Build a Tic Tac Toe Game

Objective: Build a CodePen.io app that is functionally similar to this: https://codepen.io/FreeCodeCamp/full/KzXQgy/.

Fulfill the below user stories. Use whichever libraries or APIs you need. Give it your own personal style.

- User Story: I can play a game of Tic Tac Toe with the computer.

- User Story: My game will reset as soon as it's over so I can play again.

- User Story: I can choose whether I want to play as X or O.


/* DESIGN NOTES */

markers will be black
purple background

https://www.iconsdb.com/black-icons/circle-outline-icon.html
https://upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Sinal_de_vezes.svg/200px-Sinal_de_vezes.svg.png

- want a way to indicate who's turn it is (x or o)
- want to display winner or draw at end of game
- want to display line through the 3 marks in a row when one player wins


Color pallete: http://paletton.com/#uid=54W0u0krZtneaRGlkAmu9jrDL5z

Fonts: 
<link href="https://fonts.googleapis.com/css?family=Hind:400,600" rel="stylesheet">

font-family: 'Hind', sans-serif;

/* PSEUDOCODE */

If user selects X, computer plays as O. 
Else, computer plays as X.

Once player selects marker, game board displays.

designate each box it's own value? 
a1, a2, a3
b1, b2, b3
c1, c2, c3 

or 1-9 

What will be logic to have program block ?? 

User always goes first. 
User clicks on box (class '.boxes'; id = "box_" where _ = number from 1-9)
    use "this" to display icon in the correct place 
    
If uneven number of boxes are filled, computer plays.     
    
Then computer's turn plays:
    if user went in corner (box1, box3, box7, box9), computer should go in opposite corner
    if user played center square (box5), computer can choose any corner
    
if user has any two in a row (e.g. 1) box1 + box2, 2) box2 + box3, 3) box2 + box5), computer should block (e.g. 1) box3, 2) box1, 3) box8).     

From wikipedia: "Player O must always respond to a corner opening with a center mark, and to a center opening with a corner mark. 
An edge opening must be answered either with a center mark, a corner mark next to the X, or an edge mark opposite the X. 
Any other responses will allow X to force the win. Once the opening is completed, O's task is to follow the above list of priorities 
in order to force the draw, or else to gain a win if X makes a weak play."

first play only:
if user plays center, 
    computer should play corner (can figure out a random corner? for now just use box1)
if user plays corner, 
    computer should play center
if user plays edge, 
    computer should play center, corner next to mark or edge opposite
    
    * need to figure out how to get it to play random corner after center box is played as first move. 
        - Use Math.random() 
            - if < .249, play 1; if < .499, play 3; if < .749, play 7; else, play 9. 
    * need to figure out how to get it to play either corner next to edge (PlayAdjCorner)
        - Use Math.random()
            - if < .499, play lower corner; else, play higher corner
            ( if user plays 2 & random < .499, play 1; else play 3
              if user plays 4 & random < .499, play 1; else play 7
              if user plays 6 & random < .499, play 3; else play 7
              if user plays 8 & random < .499, play 7; else play 9 )
              
    * need to figure out how to randomize if it plays center, opposite edge or corner next to edge after edge move.
        - Use Math.random()
            - if < .333, play center; else if < .666, play opposite edge; else, play Adjcorner.
            
    * need to figure out how it will know where to block. 
        have AI check "userSquaresArr" for specific patterns
        
    two in a row = 
    1, 2
    2, 3
    4, 5
    5, 6
    7, 8
    8, 9
    1, 4
    4, 7
    2, 5
    5, 8
    3, 6
    6, 9
    1, 5
    3, 5
    7, 5
    9, 5
     if userSquaresArr contains any of these combinations, computer needs to block them in the remaining space.
     
     
     winning patterns: 
    1, 2, 3
    4, 5, 6
    7, 8, 9
    1, 4, 7
    2, 5, 8
    3, 6, 9
    1, 5, 9
    3, 5, 7
    if userSquaresArr contains any two of these three and the additional value is not already in computerSquaresArr, computer needs to play that one next. 
        * implement this check on every move starting at boxCount === 3. 
        
        cycle through winningPatterns array: 
            if first element of userSquaresArr is present, 
                move on to second element of userSquaresArr.
                if second element is also present, 
                    return third element of array as move for computer to play. 
                    if this element is already taken (has class 'taken'), where should it play? 
                        if user plays an edge, should play an adjacent corner
                        if user plays a corner, should play an adjacent edge
                        
            *need to correct BlockLogic to account for winning values being at the end of the winningPattern - DONE
                        
            *At 4+ moves (and all even number of moves after) [boxCount === 4 or ((boxCount % 2 === 0) && (boxCount > 3))], 
            computer should check to see if it can win (if any of its array matches the winning patterns - maybe can reuse part of 
            BlockLogic function to run this check)*
            
            *make sure computer's moves are pushed to computerSquaresArr in all functions* - DONE
                    
   ** if boxCount === 9; display "tied game" and reset board ** 
   Possibly have a "reset" or "play again" button that displays after "tied" or either player wins. 
                    
        
    
    

Player turn indicator not working as I hoped. 
- I want it to switch immediately after the computer plays and immediately after the user plays.
- Marking it out until the game logic has been coded. Then I will try again. 